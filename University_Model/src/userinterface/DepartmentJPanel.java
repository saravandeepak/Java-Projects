/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface;

import business.college.department.Department;
import business.college.department.course.CourseOffering;
import business.college.department.course.Degree;
import business.college.department.courseschedule.Semester;
import business.college.department.departmentjobs.Person;
import business.college.department.student.Student;
import java.awt.CardLayout;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author nithinkartha
 */
public class DepartmentJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DepartmentJPanel
     */
    private JPanel userContainerJPanel;
    private Department department;
    public DepartmentJPanel(JPanel userContainerJPanel, Department department) {
        initComponents();
        this.department= department;
        this.userContainerJPanel = userContainerJPanel;
        lblDepartment.setText(department.getDepartmentName()+" Department");
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        btnDepartmentEmployee = new javax.swing.JButton();
        btnStudentEmployment = new javax.swing.JButton();
        btnTranscript = new javax.swing.JButton();
        lblDepartment = new javax.swing.JLabel();
        studentDetailsButton = new javax.swing.JButton();

        btnBack.setBackground(new java.awt.Color(204, 204, 204));
        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnDepartmentEmployee.setText("Department Jobs Report");
        btnDepartmentEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDepartmentEmployeeActionPerformed(evt);
            }
        });

        btnStudentEmployment.setText("Courses Report");
        btnStudentEmployment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStudentEmploymentActionPerformed(evt);
            }
        });

        btnTranscript.setText("Students Transcript Report");
        btnTranscript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTranscriptActionPerformed(evt);
            }
        });

        lblDepartment.setFont(new java.awt.Font("Lucida Grande", 0, 20)); // NOI18N
        lblDepartment.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDepartment.setText("jLabel1");

        studentDetailsButton.setText("Student Details");
        studentDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentDetailsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDepartment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(studentDetailsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnDepartmentEmployee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnStudentEmployment, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                        .addComponent(btnTranscript, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)))
                .addGap(133, 133, 133))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(lblDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(btnTranscript, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnStudentEmployment, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDepartmentEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(studentDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 173, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userContainerJPanel.remove(this);
        CardLayout layout = (CardLayout)userContainerJPanel.getLayout();
        layout.previous(userContainerJPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnTranscriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTranscriptActionPerformed
        // TODO add your handling code here:
        generateDepartmentTranscript(this.department);
        
    }//GEN-LAST:event_btnTranscriptActionPerformed

    private void btnStudentEmploymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStudentEmploymentActionPerformed
        // TODO add your handling code here:
        courseOfferDetailReport(department.getCourseSchedule().getSemesterList());
    }//GEN-LAST:event_btnStudentEmploymentActionPerformed

    private void btnDepartmentEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDepartmentEmployeeActionPerformed
        generateDepartmentEmployeeReport(department);
    }//GEN-LAST:event_btnDepartmentEmployeeActionPerformed

    private void studentDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentDetailsButtonActionPerformed
        // TODO add your handling code here:
        XSSFWorkbook xcel = new XSSFWorkbook();
        XSSFCellStyle headerStyle = xcel.createCellStyle();
        XSSFCellStyle tableStyle = xcel.createCellStyle();

        Font font = xcel.createFont();
        font.setBold(true);
        headerStyle.setFont(font);
        XSSFSheet sheet =  xcel.createSheet("Student Details");

        XSSFRow headerRow = sheet.createRow(0); 
        XSSFCell headerCell1 = headerRow.createCell(0);
        headerCell1.setCellValue("First Name");
        headerCell1.setCellStyle(headerStyle);
        XSSFCell headerCell2 = headerRow.createCell(1);
        headerCell2.setCellValue("Last Name");
        headerCell2.setCellStyle(headerStyle);
        XSSFCell headerCell3 = headerRow.createCell(2);
        headerCell3.setCellValue("Student Id");
        headerCell3.setCellStyle(headerStyle);
        XSSFCell headerCell4 = headerRow.createCell(3);
        headerCell4.setCellValue("Email");
        headerCell4.setCellStyle(headerStyle);
        XSSFCell headerCell5 = headerRow.createCell(4);
        headerCell5.setCellValue("Nationality");
        headerCell5.setCellStyle(headerStyle);
        XSSFCell headerCell6 = headerRow.createCell(5);
        headerCell6.setCellValue("Tuition Expense");
        headerCell6.setCellStyle(headerStyle);
        int i= 1;
        for(Student student: department.getDeptStudentDirectory().getStudentDirectory()){
       
            XSSFRow row = sheet.createRow(i); 
            XSSFCell cell1 = row.createCell(0);
            cell1.setCellValue(student.getFirstName());
            XSSFCell cell2 = row.createCell(1);
            cell2.setCellValue(student.getLastName());
            XSSFCell cell3 = row.createCell(2);
            cell3.setCellValue(student.getNuid());
            XSSFCell cell4 = row.createCell(3);
            cell4.setCellValue(student.getEmail());
            XSSFCell cell5 = row.createCell(4);
            cell5.setCellValue(student.getNationality());
            XSSFCell cell6 = row.createCell(5);
            cell6.setCellValue(student.getTuitionExpense());
            i++;
        }
        try
        {
            try ( //Write the workbook in file system
                    FileOutputStream out = new FileOutputStream(new File(department.getDepartmentName() + " Student.xlsx"))) {
                    xcel.write(out);
                    JOptionPane.showMessageDialog(this, "Student Details have been created. Check your project folder for '" + department.getDepartmentName() + " Student.xlsx'");
            }
            
        }catch (Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,"Could not create report");
        }
    }//GEN-LAST:event_studentDetailsButtonActionPerformed

    public void generateDepartmentTranscript(Department department){
        XSSFWorkbook xcel = new XSSFWorkbook();
        XSSFCellStyle headerStyle = xcel.createCellStyle();
        XSSFCellStyle tableStyle = xcel.createCellStyle();

        Font font = xcel.createFont();
        font.setBold(true);
        headerStyle.setFont(font);

        for (Student student: department.getDeptStudentDirectory().getStudentDirectory() ){
            student.getTranscript().addTranscripts(department.getCourseSchedule().getSemesterList());
            
            student.getTranscript().calculateStudentGpa();
            
            student.setCoursesList();
            for(Degree deg: department.getDegreeList() )
            {
                boolean flag = deg.isEligibleForDegree(student.getCourseList());
                if(flag == true){
                    student.addDegree(deg);
                }
            }
            

            XSSFSheet sheet =  xcel.createSheet(student.getNuid() + " " + student.getLastName());

            int trans =student.getTranscript().getSemesterTranscriptList().size();
            XSSFRow headerRow = sheet.createRow(0); 
            XSSFCell headerCell1 = headerRow.createCell(0);
            headerCell1.setCellValue("Semester");
            headerCell1.setCellStyle(headerStyle);
            XSSFCell headerCell2 = headerRow.createCell(1);
            headerCell2.setCellValue("Year");
            headerCell2.setCellStyle(headerStyle);
            XSSFCell headerCell3 = headerRow.createCell(2);
            headerCell3.setCellValue("Course Name");
            headerCell3.setCellStyle(headerStyle);
            XSSFCell headerCell4 = headerRow.createCell(3);
            headerCell4.setCellValue("Course Credit");
            headerCell4.setCellStyle(headerStyle);
            XSSFCell headerCell5 = headerRow.createCell(4);
            headerCell5.setCellValue("Course Grade");
            headerCell5.setCellStyle(headerStyle);
            XSSFCell headerCell6 = headerRow.createCell(5);
            headerCell6.setCellValue("Course GPA");
            headerCell6.setCellStyle(headerStyle);
            for(int i=0;i<trans;i++){
                    XSSFRow row = sheet.createRow(i+1); 
                    XSSFCell cell1 = row.createCell(0);
                    cell1.setCellValue(student.getTranscript().getSemesterTranscriptList().get(i).getCourseOffering().getSemester().getSemType());
                    XSSFCell cell2 = row.createCell(1);
                    cell2.setCellValue(student.getTranscript().getSemesterTranscriptList().get(i).getCourseOffering().getSemester().getSemYear());
                    XSSFCell cell3 = row.createCell(2);
                    cell3.setCellValue(student.getTranscript().getSemesterTranscriptList().get(i).getCourseOffering().getCourse().getCourseName());
                    XSSFCell cell4 = row.createCell(3);
                    cell4.setCellValue(student.getTranscript().getSemesterTranscriptList().get(i).getCourseOffering().getCourse().getCourseCredit());
                    XSSFCell cell5 = row.createCell(4);
                    cell5.setCellValue(student.getTranscript().getSemesterTranscriptList().get(i).getCourseGrade());
                    XSSFCell cell6 = row.createCell(5);
                    cell6.setCellValue(student.getTranscript().getSemesterTranscriptList().get(i).getCourseGpa());

            }
            XSSFRow gpaRow = sheet.createRow(trans + 3);
            XSSFCell gpaCell1 = gpaRow.createCell(2);
            gpaCell1.setCellValue("Overall Gpa");
            gpaCell1.setCellStyle(headerStyle);
            XSSFCell gpaCell2 = gpaRow.createCell(3);
            gpaCell2.setCellValue(student.getTranscript().getGpa());
           
            XSSFRow degHRow = sheet.createRow(trans + 5);
            XSSFCell gpaHCell1 = degHRow.createCell(2);
            gpaHCell1.setCellValue("Degree");
            gpaHCell1.setCellStyle(headerStyle);
            XSSFCell gpaHCell2 = degHRow.createCell(3);
            gpaHCell2.setCellValue("Major");
            gpaHCell2.setCellStyle(headerStyle);
             
            int i =0;
            for (Degree d:student.getDegreesHeld()){
                
                XSSFRow degRow = sheet.createRow(trans + 6 + i);
                XSSFCell gpaCell = degRow.createCell(1);
                gpaCell.setCellValue("Degree Acquired");
                gpaCell.setCellStyle(headerStyle);
                XSSFCell degCell1 = degRow.createCell(2);
                degCell1.setCellValue(d.getDegreeType());         
                XSSFCell degCell2 = degRow.createCell(3);
                degCell2.setCellValue(d.getMajor());
                i++;
            }
            
            
            
            
            
        }
        try
        {
            try ( //Write the workbook in file system
                    FileOutputStream out = new FileOutputStream(new File(department.getDepartmentName() + " Transcript.xlsx"))) {
                    xcel.write(out);
                    JOptionPane.showMessageDialog(this, "Transcript has been created. Check your project folder for '" + department.getDepartmentName() + " Transcript.xlsx'");
            }
            
        }catch (Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,"Could not create report");
        } 
    }
    
    public void courseOfferDetailReport(ArrayList<Semester> semesterList){
        XSSFWorkbook xcel = new XSSFWorkbook();
        XSSFCellStyle headerStyle = xcel.createCellStyle();
        
        Font font = xcel.createFont();
        font.setBold(true);
        headerStyle.setFont(font);
        
        XSSFSheet courseOfferSheet =  xcel.createSheet("Course Details");
        XSSFRow headerRow = courseOfferSheet.createRow(0); 
        XSSFCell hcell1 = headerRow.createCell(0);
        hcell1.setCellValue("Semester");
        hcell1.setCellStyle(headerStyle);
        XSSFCell hcell2 = headerRow.createCell(1);
        hcell2.setCellValue("Year");
        hcell2.setCellStyle(headerStyle);
        XSSFCell hcell3 = headerRow.createCell(2);
        hcell3.setCellValue("Course");
        hcell3.setCellStyle(headerStyle);
        XSSFCell hcell4 = headerRow.createCell(3);
        hcell4.setCellValue("Course CRN");
        hcell4.setCellStyle(headerStyle);
        XSSFCell hcell5 = headerRow.createCell(4);
        hcell5.setCellValue("Professor");
        hcell5.setCellStyle(headerStyle);
        XSSFCell hcell6 = headerRow.createCell(5);
        hcell6.setCellValue("Day");
        hcell6.setCellStyle(headerStyle);
        XSSFCell hcell7 = headerRow.createCell(6);
        hcell7.setCellValue("Start Time");
        hcell7.setCellStyle(headerStyle);
        XSSFCell hcell8 = headerRow.createCell(7);
        hcell8.setCellValue("End Time");
        hcell8.setCellStyle(headerStyle);
        XSSFCell hcell9 = headerRow.createCell(8);
        hcell9.setCellValue("Building");
        hcell9.setCellStyle(headerStyle);
        XSSFCell hcell10 = headerRow.createCell(9);
        hcell10.setCellValue("Room");
        hcell10.setCellStyle(headerStyle);
        XSSFCell hcell11 = headerRow.createCell(10);
        hcell11.setCellValue("Assigned Seats");
        hcell11.setCellStyle(headerStyle);
        XSSFCell hcell12 = headerRow.createCell(11);
        hcell12.setCellValue("Vacant Seats");
        hcell12.setCellStyle(headerStyle);
        
        int i = 1;
        for(Semester semester: semesterList){

            //XSSFRow row = courseOfferSheet.createRow(i);
           
            int courseOffNum = semester.viewSemesterSchedule().size();
            
            for(CourseOffering courseOffer: semester.viewSemesterSchedule())
            {  
                
                XSSFRow cRow = courseOfferSheet.createRow(i);
                XSSFCell cell1 = cRow.createCell(0);
                cell1.setCellValue(semester.getSemType());

                XSSFCell cell2 = cRow.createCell(1);
                cell2.setCellValue(semester.getSemYear());
                
                XSSFCell cell3 = cRow.createCell(2);
                cell3.setCellValue(courseOffer.getCourse().getCourseName());

                XSSFCell cell4 = cRow.createCell(3);
                cell4.setCellValue(courseOffer.getCourse().getCourseCrn());

                XSSFCell cell5 = cRow.createCell(4);
                cell5.setCellValue(courseOffer.getProfessor().getFirstName() + " " + courseOffer.getProfessor().getLastName());

                XSSFCell cell6 = cRow.createCell(5);
                cell6.setCellValue(courseOffer.getDay());

                XSSFCell cell7 = cRow.createCell(6);
                cell7.setCellValue(courseOffer.getLectureStartTime());

                XSSFCell cell8 = cRow.createCell(7);
                cell8.setCellValue(courseOffer.getLectureEndTime());

                XSSFCell cell9 = cRow.createCell(8);
                cell9.setCellValue(courseOffer.getCourseRoom().getBuilding());

                XSSFCell cell10 = cRow.createCell(9);
                cell10.setCellValue(courseOffer.getCourseRoom().getRoomNum());
                
                XSSFCell cell11 = cRow.createCell(10);
                cell11.setCellValue(courseOffer.getSeatList().size());
                
                XSSFCell cell12 = cRow.createCell(11);
                cell12.setCellValue(courseOffer.calculateVacancy());
            i++;    
            } 
            
            
        }
        try
        {
            try ( //Write the workbook in file system
                    FileOutputStream out = new FileOutputStream(new File(department.getDepartmentName() + " Course Details.xlsx"))) {
                    xcel.write(out);
                    JOptionPane.showMessageDialog(this, "Transcript has been created. Check your project folder for '" + department.getDepartmentName() + " Course Details.xlsx'");
            }
            
        }catch (Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,"Could not create report");
        } 
    }
    public void generateDepartmentEmployeeReport(Department department){
        ArrayList<Person> deptFaculty = new ArrayList<>();
        ArrayList<Person> deptStaff = new ArrayList<>();
        deptFaculty = department.getFacultyDirectory().getFacultyDirectory();
        deptStaff = department.getStaffDirectory().getStaffDirectory();
        
        XSSFWorkbook xcel = new XSSFWorkbook();
        XSSFSheet sheet =  xcel.createSheet("Department Faculty details");
        
        XSSFCellStyle headerStyle = xcel.createCellStyle();
        XSSFFont font = xcel.createFont();
        font.setBold(true);
        headerStyle.setFont(font);
        XSSFRow headerRow = sheet.createRow(0); 
        XSSFCell headerCell1 = headerRow.createCell(0);
        headerCell1.setCellValue("First Name");
        headerCell1.setCellStyle(headerStyle);
        XSSFCell headerCell2 = headerRow.createCell(1);
        headerCell2.setCellValue("Last Name");
        headerCell2.setCellStyle(headerStyle);
        XSSFCell headerCell3 = headerRow.createCell(2);
        headerCell3.setCellValue("Email");
        headerCell3.setCellStyle(headerStyle);
        XSSFCell headerCell4 = headerRow.createCell(3);
        headerCell4.setCellValue("Phone Number");
        headerCell4.setCellStyle(headerStyle);
        XSSFCell headerCell5 = headerRow.createCell(4);
        headerCell5.setCellValue("SSN");
        headerCell5.setCellStyle(headerStyle);
        XSSFCell headerCell6 = headerRow.createCell(5);
        headerCell6.setCellValue("Role");
        headerCell6.setCellStyle(headerStyle);
        XSSFCell headerCell7 = headerRow.createCell(6);
        headerCell7.setCellValue("salary");
        headerCell7.setCellStyle(headerStyle);
        
        for(int i=0;i<deptFaculty.size();i++){
            XSSFRow row = sheet.createRow(i+1); 
            XSSFCell cell = row.createCell(0);
            cell.setCellValue(deptFaculty.get(i).getFirstName());
            XSSFCell cell1 = row.createCell(1);
            cell1.setCellValue(deptFaculty.get(i).getLastName());
            XSSFCell cell2 = row.createCell(2);
            cell2.setCellValue(deptFaculty.get(i).getEmail());
            XSSFCell cell3 = row.createCell(3);
            cell3.setCellValue(Long.toString(deptFaculty.get(i).getPhoneNo()));
            XSSFCell cell4 = row.createCell(4);
            cell4.setCellValue(deptFaculty.get(i).getSsn());
            XSSFCell cell5 = row.createCell(5);
            cell5.setCellValue(deptFaculty.get(i).getRole().getRoleName());
            XSSFCell cell6 = row.createCell(6);
            cell6.setCellValue(deptFaculty.get(i).getRole().getSalary());
            
        }
        
        XSSFSheet sheet1 =  xcel.createSheet("Department Staff details");
        
        XSSFRow headerRow1 = sheet1.createRow(0); 
        XSSFCell headerCell11 = headerRow1.createCell(0);
        headerCell11.setCellValue("First Name");
        headerCell11.setCellStyle(headerStyle);
        XSSFCell headerCell12 = headerRow1.createCell(1);
        headerCell12.setCellValue("Last Name");
        headerCell12.setCellStyle(headerStyle);
        XSSFCell headerCell13 = headerRow1.createCell(2);
        headerCell13.setCellValue("Email");
        headerCell13.setCellStyle(headerStyle);
        XSSFCell headerCell14 = headerRow1.createCell(3);
        headerCell14.setCellValue("Phone Number");
        headerCell14.setCellStyle(headerStyle);
        XSSFCell headerCell15 = headerRow1.createCell(4);
        headerCell15.setCellValue("SSN");
        headerCell15.setCellStyle(headerStyle);
        XSSFCell headerCell16 = headerRow1.createCell(5);
        headerCell16.setCellValue("Role");
        headerCell16.setCellStyle(headerStyle);
        XSSFCell headerCell17 = headerRow1.createCell(6);
        headerCell17.setCellValue("salary");
        headerCell17.setCellStyle(headerStyle);
        
        for(int i=0;i<deptStaff.size();i++){
            XSSFRow row = sheet1.createRow(i+1); 
            XSSFCell cell = row.createCell(0);
            cell.setCellValue(deptStaff.get(i).getFirstName());
            XSSFCell cell1 = row.createCell(1);
            cell1.setCellValue(deptStaff.get(i).getLastName());
            XSSFCell cell2 = row.createCell(2);
            cell2.setCellValue(deptStaff.get(i).getEmail());
            XSSFCell cell3 = row.createCell(3);
            cell3.setCellValue(Long.toString(deptStaff.get(i).getPhoneNo()));
            XSSFCell cell4 = row.createCell(4);
            cell4.setCellValue(deptStaff.get(i).getSsn());
            XSSFCell cell5 = row.createCell(5);
            cell5.setCellValue(deptStaff.get(i).getRole().getRoleName());
            XSSFCell cell6 = row.createCell(6);
            cell6.setCellValue(deptStaff.get(i).getRole().getSalary());
        }
        try
        {
            try ( //Write the workbook in file system
                    FileOutputStream out = new FileOutputStream(new File(department.getDepartmentName()+"DepartmentEmployees.xlsx"))) {
                    xcel.write(out);
                    JOptionPane.showMessageDialog(this, "Department Jobs Report has been created. Check your project folder for " + department.getDepartmentName() + "_Department Employees.xlsx");
            }
            System.out.println(department.getDepartmentName()+"DepartmentEmployees.xlsx written successfully on disk.");
        }catch (Exception e){
            e.printStackTrace();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDepartmentEmployee;
    private javax.swing.JButton btnStudentEmployment;
    private javax.swing.JButton btnTranscript;
    private javax.swing.JLabel lblDepartment;
    private javax.swing.JButton studentDetailsButton;
    // End of variables declaration//GEN-END:variables
}
